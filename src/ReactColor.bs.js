// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Tinycolor = require("@ctrl/tinycolor");
var TinyColor$RescriptTinycolor = require("rescript-tinycolor/src/TinyColor.bs.js");
var Common = require("react-color/lib/components/common");

var ChromePicker = {};

var EditableInput = {};

var Saturation = {};

var Hue = {};

var Alpha = {};

var Checkboard = {};

function buildRgbaString(color) {
  return Tinycolor.tinycolor(color.rgb).toRgbString();
}

function buildHexString(color) {
  return Tinycolor.tinycolor(color.rgb).toHexString();
}

function isValidHex(hex) {
  var lh = hex.startsWith("#") ? 1 : 0;
  if (hex.length !== (4 + lh | 0) && hex.length < (7 + lh | 0)) {
    return Tinycolor.tinycolor(hex).isValid;
  } else {
    return false;
  }
}

function removeHash(param) {
  return param.replace("#", "");
}

function colorToString(c) {
  return c.toString();
}

function setRange(small, big, value) {
  if (Caml_obj.caml_lessthan(value, small)) {
    return small;
  } else if (Caml_obj.caml_greaterthan(value, big)) {
    return big;
  } else {
    return value;
  }
}

function setAlphaWithRange(param) {
  return setRange(0, 100, param);
}

function setChannelRange(param) {
  return setRange(0, 255, param);
}

function divBy100(v) {
  return v / 100;
}

function parseChannel(channel) {
  var value = Belt_Option.getWithDefault(channel, "0");
  var v = Pervasives.int_of_string_opt(value);
  if (v !== undefined) {
    return setRange(0, 255, v);
  } else {
    return 0;
  }
}

function parseAlpha(alpha) {
  var value = Belt_Option.getWithDefault(alpha, "0");
  var v = Pervasives.float_of_string_opt(value);
  if (v !== undefined) {
    return setRange(0, 100, v) / 100;
  } else {
    return 0;
  }
}

var input = {
  backgroundColor: "transparent",
  border: "none",
  color: "white",
  fontSize: "11px",
  padding: "4px 10% 3px",
  width: "100%",
  borderRadius: "4px",
  boxShadow: "inset 0 0 0 1px #4f5d7f"
};

var label = {
  color: "#d4dfed",
  display: "block",
  fontSize: "11px",
  paddingTop: "3px",
  paddingBottom: "4px",
  textAlign: "center",
  textTransform: "capitalize",
  userSelect: "none"
};

var Styles = {
  input: input,
  label: label
};

function ReactColor$SketchFields(Props) {
  var onChange = Props.onChange;
  var r = Props.r;
  var g = Props.g;
  var b = Props.b;
  var a = Props.a;
  var hsl = Props.hsl;
  var hex = Props.hex;
  var match = React.useState(function () {
        return {
                r: r,
                g: g,
                b: b,
                a: a,
                hex: hex,
                hsl: hsl
              };
      });
  var setValue = match[1];
  var value = match[0];
  var handleChange = function (source, data, _event) {
    var match;
    switch (source) {
      case /* Hex */0 :
          match = [
            {
              r: value.r,
              g: value.g,
              b: value.b,
              a: value.a,
              hex: Belt_Option.getExn(data.hex),
              hsl: value.hsl
            },
            Caml_option.some(Tinycolor.tinycolor(data.hex))
          ];
          break;
      case /* R */1 :
          var newR = parseChannel(data.r);
          match = [
            {
              r: newR,
              g: value.g,
              b: value.b,
              a: value.a,
              hex: value.hex,
              hsl: value.hsl
            },
            TinyColor$RescriptTinycolor.makeFromRgba({
                  r: newR,
                  g: value.g,
                  b: value.b,
                  a: value.a
                })
          ];
          break;
      case /* G */2 :
          var newG = parseChannel(data.g);
          match = [
            {
              r: value.r,
              g: newG,
              b: value.b,
              a: value.a,
              hex: value.hex,
              hsl: value.hsl
            },
            TinyColor$RescriptTinycolor.makeFromRgba({
                  r: value.r,
                  g: newG,
                  b: value.b,
                  a: value.a
                })
          ];
          break;
      case /* B */3 :
          var newB = parseChannel(data.b);
          match = [
            {
              r: value.r,
              g: value.g,
              b: newB,
              a: value.a,
              hex: value.hex,
              hsl: value.hsl
            },
            TinyColor$RescriptTinycolor.makeFromRgba({
                  r: value.r,
                  g: value.g,
                  b: newB,
                  a: value.a
                })
          ];
          break;
      case /* A */4 :
          var newA = parseAlpha(data.a);
          match = [
            {
              r: value.r,
              g: value.g,
              b: value.b,
              a: newA,
              hex: value.hex,
              hsl: hsl
            },
            TinyColor$RescriptTinycolor.makeFromHsla({
                  h: hsl.h,
                  s: hsl.a,
                  l: hsl.l,
                  a: newA
                })
          ];
          break;
      
    }
    var newValue = match[0];
    Curry._1(setValue, (function (param) {
            return newValue;
          }));
    return Curry._1(onChange, match[1]);
  };
  return React.createElement("div", {
              className: "flex"
            }, React.createElement("div", {
                  className: "mr-1",
                  style: {
                    flex: "2 2"
                  }
                }, React.createElement(Common.EditableInput, {
                      label: "hex",
                      value: hex.replace("#", ""),
                      style: {
                        input: input,
                        label: label
                      },
                      onChange: (function (param, param$1) {
                          return handleChange(/* Hex */0, param, param$1);
                        })
                    })), React.createElement("div", {
                  className: "flex-1 mr-1"
                }, React.createElement(Common.EditableInput, {
                      label: "r",
                      value: r.toString(),
                      style: {
                        input: input,
                        label: label
                      },
                      onChange: (function (param, param$1) {
                          return handleChange(/* R */1, param, param$1);
                        })
                    })), React.createElement("div", {
                  className: "flex-1 mr-1"
                }, React.createElement(Common.EditableInput, {
                      label: "g",
                      value: g.toString(),
                      style: {
                        input: input,
                        label: label
                      },
                      onChange: (function (param, param$1) {
                          return handleChange(/* G */2, param, param$1);
                        })
                    })), React.createElement("div", {
                  className: "flex-1 mr-1"
                }, React.createElement(Common.EditableInput, {
                      label: "b",
                      value: b.toString(),
                      style: {
                        input: input,
                        label: label
                      },
                      onChange: (function (param, param$1) {
                          return handleChange(/* B */3, param, param$1);
                        })
                    })), React.createElement("div", {
                  className: "flex-1"
                }, React.createElement(Common.EditableInput, {
                      label: "a",
                      value: Math.round(a * 100).toString(),
                      style: {
                        input: input,
                        label: label
                      },
                      onChange: (function (param, param$1) {
                          return handleChange(/* A */4, param, param$1);
                        })
                    })));
}

var SketchFields = {
  Styles: Styles,
  make: ReactColor$SketchFields
};

function ReactColor$Sketch(Props) {
  var value = Props.value;
  var onChange = Props.onChange;
  var footer = Props.footer;
  var match = React.useState(function () {
        return TinyColor$RescriptTinycolor.makeFromString(value);
      });
  var setColor = match[1];
  var color = match[0];
  var match$1 = Belt_Option.map(color, TinyColor$RescriptTinycolor.toHsl);
  var match$2 = Belt_Option.map(color, TinyColor$RescriptTinycolor.toHsv);
  var match$3 = Belt_Option.map(color, TinyColor$RescriptTinycolor.toRgb);
  var match$4 = Belt_Option.map(color, (function (prim) {
          return prim.toHex();
        }));
  if (match$1 !== undefined && match$2 !== undefined && match$3 !== undefined && match$4 !== undefined && color !== undefined) {
    return React.createElement("div", {
                className: "bg-mono-800 w-full h-full rounded border-p"
              }, React.createElement("div", {
                    className: "w-full h-40 overflow-hidden relative"
                  }, React.createElement(Common.Saturation, {
                        hsl: {
                          h: match$1.h,
                          s: match$1.s,
                          l: match$1.l,
                          a: match$1.a
                        },
                        hsv: {
                          h: match$2.h,
                          s: match$2.s,
                          v: match$2.v,
                          a: match$2.a
                        },
                        onChange: (function (param) {
                            var c = TinyColor$RescriptTinycolor.makeFromHsva({
                                  h: param.h,
                                  s: param.s,
                                  v: param.v,
                                  a: param.a
                                });
                            if (c === undefined) {
                              return ;
                            }
                            var c$1 = Caml_option.valFromOption(c);
                            Curry._1(onChange, c$1.toRgbString());
                            return Curry._1(setColor, (function (param) {
                                          return Caml_option.some(c$1);
                                        }));
                          })
                      })), React.createElement("div", {
                    className: "flex"
                  }, React.createElement("div", {
                        className: "py-1 flex-1"
                      }, React.createElement("div", {
                            className: "w-full overflow-hidden relative",
                            style: {
                              height: "10px"
                            }
                          }, React.createElement(Common.Hue, {
                                hsl: {
                                  h: match$1.h,
                                  s: match$1.s,
                                  l: match$1.l,
                                  a: match$1.a
                                },
                                onChange: (function (param) {
                                    var newColor = TinyColor$RescriptTinycolor.makeFromHsla({
                                          h: param.h,
                                          s: param.s,
                                          l: param.l,
                                          a: param.a
                                        });
                                    if (newColor === undefined) {
                                      return ;
                                    }
                                    var c = Caml_option.valFromOption(newColor);
                                    Curry._1(onChange, c.toRgbString());
                                    return Curry._1(setColor, (function (param) {
                                                  return Caml_option.some(c);
                                                }));
                                  })
                              })), React.createElement("div", {
                            className: "w-full h-2 pb-1 mt-1 overflow-hidden relative",
                            style: {
                              height: "10px"
                            }
                          }, React.createElement(Common.Alpha, {
                                hsl: {
                                  h: match$1.h,
                                  s: match$1.s,
                                  l: match$1.l,
                                  a: match$1.a
                                },
                                rgb: {
                                  r: match$3.r,
                                  g: match$3.g,
                                  b: match$3.b,
                                  a: match$3.a
                                },
                                onChange: (function (param) {
                                    var c = TinyColor$RescriptTinycolor.makeFromHsla({
                                          h: param.h,
                                          s: param.s,
                                          l: param.l,
                                          a: param.a
                                        });
                                    if (c === undefined) {
                                      return ;
                                    }
                                    var c$1 = Caml_option.valFromOption(c);
                                    Curry._1(onChange, c$1.toRgbString());
                                    return Curry._1(setColor, (function (param) {
                                                  return Caml_option.some(c$1);
                                                }));
                                  })
                              }))), React.createElement("div", {
                        className: "w-6 relative m-1 mr-0 rounded"
                      }, React.createElement("div", {
                            className: "absolute h-full inset-0",
                            style: {
                              background: Caml_option.valFromOption(color).toRgbString(),
                              borderRadius: "2px"
                            }
                          }), React.createElement(Common.Checkboard, {
                            boxShadow: "rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset, rgba(0, 0, 0, 0.25) 0px 0px 4px inset",
                            borderRadius: "2px"
                          }))), React.createElement(ReactColor$SketchFields, {
                    onChange: (function (newColor) {
                        Curry._1(setColor, (function (param) {
                                return newColor;
                              }));
                        if (newColor !== undefined) {
                          return Curry._1(onChange, Caml_option.valFromOption(newColor).toRgbString());
                        }
                        
                      }),
                    r: match$3.r,
                    g: match$3.g,
                    b: match$3.b,
                    a: match$3.a,
                    hsl: match$1,
                    hex: match$4
                  }), footer);
  } else {
    return null;
  }
}

var Sketch = {
  make: ReactColor$Sketch
};

exports.ChromePicker = ChromePicker;
exports.EditableInput = EditableInput;
exports.Saturation = Saturation;
exports.Hue = Hue;
exports.Alpha = Alpha;
exports.Checkboard = Checkboard;
exports.buildRgbaString = buildRgbaString;
exports.buildHexString = buildHexString;
exports.isValidHex = isValidHex;
exports.removeHash = removeHash;
exports.colorToString = colorToString;
exports.setRange = setRange;
exports.setAlphaWithRange = setAlphaWithRange;
exports.setChannelRange = setChannelRange;
exports.divBy100 = divBy100;
exports.parseChannel = parseChannel;
exports.parseAlpha = parseAlpha;
exports.SketchFields = SketchFields;
exports.Sketch = Sketch;
/* react Not a pure module */
